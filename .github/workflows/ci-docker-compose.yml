name: Docker Swarm CI

on:
  push:
    branches-ignore:
      - main
  pull_request:
    branches:
      - main

###########################
#      CONFIGURATION      #
###########################
jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: üì• Cloner le d√©p√¥t
        uses: actions/checkout@v4

      - name: ‚öôÔ∏è Configurer Docker Swarm
        run: docker swarm init || echo "Swarm d√©j√† initialis√© ou erreur ignor√©e"
      
      - name: ‚öôÔ∏è V√©rifier si Docker Swarm est bien actif
        run: docker info | grep -i swarm

      - name: üíæ Sauvegarder le workspace
        uses: actions/upload-artifact@v4
        with:
          name: workspace
          path: ./
          retention-days: 1
          
  matrix_setup : 
    needs: setup
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [elk, opencti, openbas]
    steps:
      - name: üîÑ Restaurer le workspace et `.env`
        uses: actions/download-artifact@v4
        with:
          name: workspace
          path: ./
  
      - name: üîé V√©rifier l'existence des fichiers Docker Compose
        run: |
          for service in elk; do
            if [[ ! -f "$service/docker-compose.yml" ]]; then
              echo "‚ùå Fichier manquant : $service/docker-compose.yml"
              exit 1
            fi
          done
        
      - name: üïµÔ∏è V√©rification de l'existence du fichier .env
        run: |
          ls -la elk/
          cat elk/.env || echo "‚ùå Fichier .env introuvable !"
      
      - name: üíæ Sauvegarder `.env`
        uses: actions/upload-artifact@v4
        with:
          name: env_file_${{ matrix.service }}
          path: ${{ matrix.service }}/.env

###########################
#      D√âPLOIEMENT        #
###########################
  deploy:
    needs: 
      - setup
      - matrix_setup
    runs-on: ubuntu-latest
    services:
      docker:
        image: docker:dind
        options: --privileged
    strategy:
      matrix:
        service: [elk, opencti, openbas]
    steps:
      - name: üîÑ Restaurer le workspace et `.env`
        uses: actions/download-artifact@v4
        with:
          name: workspace
          path: ./
      
      - name: üöÄ D√©ployer ${{ matrix.service }}
        run: |
          export $(grep -v '^#' ${{ matrix.service }}/.env | xargs)
          docker stack deploy -c ${{ matrix.service }}/docker-compose.yml ${{ matrix.service }} 2>&1 | tee logs_${{ matrix.service }}.txt

      - name: üì¶ Stocker les logs de ${{ matrix.service }}
        uses: actions/upload-artifact@v4
        with:
          name: logs_${{ matrix.service }}
          path: logs_${{ matrix.service }}.txt

###########################
#  D√âTECTION DES ERREURS  #
###########################
  check_errors:
    needs: deploy
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [elk, opencti, openbas]
    steps:
      - name: üì• R√©cup√©rer les logs de ${{ matrix.service }}
        uses: actions/download-artifact@v4
        with:
          name: logs_${{ matrix.service }}
          path: .

      - name: üîç V√©rifier les erreurs dans logs_${{ matrix.service }}.txt
        id: detect_failure
        run: |
          if grep -qi "error\|failed\|cannot\|swarm manager" logs_${{ matrix.service }}.txt; then
            echo "‚ö†Ô∏è Erreur d√©tect√©e dans logs_${{ matrix.service }}.txt"
            echo "test_failed=true" >> $GITHUB_ENV
          else
            echo "test_failed=false" >> $GITHUB_ENV

###########################
#   GESTION DES LOGS      #
###########################
  push_logs:
    needs: check_errors
    runs-on: ubuntu-latest
    steps:
      - name: üì• Restaurer le workspace
        uses: actions/download-artifact@v4
        with:
          name: workspace
          path: .

      - name: üöÄ V√©rifier `.git/`
        run: |
          if [ ! -d ".git" ]; then
            echo "‚ö†Ô∏è Le dossier .git est manquant, reclonage en cours..."
            git clone https://github.com/${{ github.repository }}.git .
          fi

      - name: üì• T√©l√©charger tous les logs
        uses: actions/download-artifact@v4
        with:
          path: logs/

      - name: üìù G√©n√©rer un fichier de logs consolid√©
        run: |
          echo "üìÖ Date : $(date)" > error-log.txt
          for service in elk opencti openbas; do
            log_file="logs/logs_${service}/logs_${service}.txt"
            if [[ -f "$log_file" ]]; then
              echo "‚ùå ERREUR POUR $service :" >> error-log.txt
              cat "$log_file" >> error-log.txt
            else
              echo "‚úÖ Aucun log trouv√© pour $service." >> error-log.txt
            fi
          done
          git add error-log.txt
          git commit -m "Ajout des logs d'erreur via GitHub Actions" || echo "Aucune modification √† commit"
          git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git

      - name: üîÄ Cr√©er une Pull Request vers `develop` si aucun log d'erreur n'est trouv√©
        if: success()
        run: |
          gh pr create --base develop --head ${{ github.ref_name }} --title "Merge successful deployment" --body "Tous les services se sont d√©ploy√©s correctement."
