name: Docker Compose CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - name: 📥 Cloner le dépôt
      uses: actions/checkout@v3

    - name: ⚙️ Configurer Docker et Swarm
      run: |
        docker swarm init || true

    ###########################
    #        SURICATA         #
    ###########################
    - name: 🛡️ Lancer les services Suricata
      run: |
        docker stack deploy -c Suricata/docker-compose.yml suricata || echo "TEST_FAILED=true" >> $GITHUB_ENV

    # - name: ✅ Vérifier l'état de Suricata
    #   run: |
    #     docker service ls
    #     docker service ps suricata || echo "TEST_FAILED=true" >> $GITHUB_ENV

    ###########################
    #         WAZUH          #
    ###########################
    - name: 📊 Lancer les services Wazuh
      run: |
        docker stack deploy -c wazuh/docker-compose.yml wazuh || echo "TEST_FAILED=true" >> $GITHUB_ENV

    # - name: ✅ Vérifier l'état de Wazuh
    #   run: |
    #     docker service ls
    #     curl -f http://localhost:5601 || echo "TEST_FAILED=true" >> $GITHUB_ENV
    #     curl -f http://localhost:55000 || echo "TEST_FAILED=true" >> $GITHUB_ENV

    ###########################
    #          ELK           #
    ###########################
    - name: 📈 Lancer les services ELK
      run: |
        docker stack deploy -c ELK/docker-compose.yml elk || echo "TEST_FAILED=true" >> $GITHUB_ENV

    # - name: ✅ Vérifier l'état de ELK
    #   run: |
    #     docker service ls
    #     curl -f http://localhost:5601 || echo "TEST_FAILED=true" >> $GITHUB_ENV
    #     curl -f http://localhost:9200 || echo "TEST_FAILED=true" >> $GITHUB_ENV

    ###########################
    #        OPENCTI         #
    ###########################
    - name: 🔍 Lancer les services OpenCTI
      run: |
        docker stack deploy -c opencti/docker-compose.yml opencti || echo "TEST_FAILED=true" >> $GITHUB_ENV

    # - name: ✅ Vérifier l'état de OpenCTI
    #   run: |
    #     docker service ls
    #     curl -f http://localhost:8080 || echo "TEST_FAILED=true" >> $GITHUB_ENV


    - name: ✅ Vérifier l'état global des services
      id: tests
      run: |
        set -e
        docker service ls
        curl -f http://localhost:5601 || echo "TEST_FAILED=true" >> $GITHUB_ENV
        curl -f http://localhost:9200 || echo "TEST_FAILED=true" >> $GITHUB_ENV
        curl -f http://localhost:8080 || echo "TEST_FAILED=true" >> $GITHUB_ENV
    
    ###########################
    #       NETTOYAGE        #
    ###########################
    - name: 🗑️ Nettoyer les services
      run: |
        docker stack rm suricata || true
        docker stack rm wazuh || true
        docker stack rm elk || true
        docker stack rm opencti || true

    ###########################
    #   GESTION DES BRANCHES  #
    ###########################
    - name: 🏷️ Déterminer la branche cible
      id: branch_target
      run: |
        echo "TEST_FAILED=${{ env.TEST_FAILED }}"  # Debug pour voir si la variable est bien définie
        if [[ "${{ env.TEST_FAILED }}" == "true" ]]; then
          TIMESTAMP=$(date +'%Y%m%d-%H%M%S')
          echo "BRANCH=erreur-$TIMESTAMP" >> $GITHUB_ENV
        else
          echo "BRANCH=develop" >> $GITHUB_ENV
        fi

    - name: 🚀 Créer et Pousser la branche
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "github-actions@github.com"
      
        git checkout -b ${{ env.BRANCH }}

        echo "Erreur détectée dans le pipeline à $(date)" >> error-log.txt
        git add error-log.txt

        git commit -m "Mise à jour automatique via GitHub Actions [ERREUR]"
        git push origin ${{ env.BRANCH }} --force || echo "PUSH_FAILED=true" >> $GITHUB_ENV
