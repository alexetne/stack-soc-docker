name: Docker Swarm CI

on:
  push:
    branches-ignore:
      - main
  pull_request:
    branches:
      - main

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Cloner le dépôt
        uses: actions/checkout@v4

      - name: ⚙️ Configurer Docker Swarm
        run: docker swarm init || true

      - name: 🕵️ Vérification de l'existence du fichier .env
        run: cp elk/.env elk/env_file

      - name: 💾 Sauvegarder `.env`
        uses: actions/upload-artifact@v4
        with:
          name: env_file
          path: elk/env_file

      - name: 💾 Sauvegarder le workspace
        uses: actions/upload-artifact@v4
        with:
          name: workspace
          path: .

  deploy:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: 🔄 Restaurer le workspace
        uses: actions/download-artifact@v4
        with:
          name: workspace

      - name: 🔄 Restaurer `.env`
        uses: actions/download-artifact@v4
        with:
          name: env_file
          path: elk/

      - name: 🚀 Déployer
        run: |
          export $(grep -v '^#' elk/env_file | xargs)
          docker swarm init || true
          docker stack deploy -c elk/docker-compose.yml elk 2>&1 | tee logs_elk.txt

      - name: 📦 Stocker les logs
        uses: actions/upload-artifact@v4
        with:
          name: logs_elk
          path: logs_elk.txt

  check_errors:
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Récupérer les logs
        uses: actions/download-artifact@v4
        with:
          name: logs_elk

      - name: 🔍 Vérifier les erreurs
        id: detect_failure
        run: |
          TEST_FAILED=false
          grep -i 'error\|failed\|cannot' logs_elk.txt | grep -vE 'Creating|tasks|Swarm already initialized' > filtered_logs.txt || true
          if [ -s filtered_logs.txt ]; then TEST_FAILED=true; fi
          echo "test_failed=$TEST_FAILED" >> $GITHUB_OUTPUT

  push_logs:
    needs: check_errors
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Restaurer le workspace
        uses: actions/download-artifact@v4
        with:
          name: workspace

      - name: 📥 Télécharger tous les logs
        uses: actions/download-artifact@v4
        with:
          path: logs/

      - name: 📝 Générer un fichier de logs
        run: |
          echo "📅 Date : $(date)" > error-log.txt
          cat logs/logs_elk/logs_elk.txt >> error-log.txt
          git add error-log.txt

      - name: 🚀 Pousser les logs si erreur
        if: needs.check_errors.outputs.test_failed == 'true'
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "github-actions@github.com"
          git commit -m "Ajout des logs d'erreur" || echo "Aucune modification à commit"
          git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git $BRANCH --force

      - name: 🔀 Créer une Pull Request vers `develop` si aucun log d'erreur n'est trouvé
        if: env.ERROR_LOGS == 'false'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh pr create --base develop --head ${{ github.ref_name }} --title "Merge successful deployment" --body "Tous les services se sont déployés correctement. PR automatique vers develop."
