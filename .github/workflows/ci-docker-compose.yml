name: Docker Swarm CI

on:
  push:
    branches-ignore:
      - main
  pull_request:
    branches:
      - main

jobs:
  ###########################
  #      CONFIGURATION      #
  ###########################
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Cloner le dépôt
        uses: actions/checkout@v4

      - name: ⚙️ Configurer Docker et Swarm
        run: docker swarm init || true

      - name: 🔎 Vérifier l'existence des fichiers Docker Compose
        run: |
          for service in suricata wazuh elk opencti; do
            if [[ ! -f "$service/docker-compose.yml" ]]; then
              echo "❌ Fichier manquant : $service/docker-compose.yml"
              exit 1
            fi
          done

      - name: 💾 Sauvegarder le workspace
        uses: actions/upload-artifact@v4
        with:
          name: workspace
          path: |
            .
            .git/
          retention-days: 1

  ###########################
  #      AJOUT MANAGER      #
  ###########################
  manager:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: 🔄 Restaurer le workspace
        uses: actions/download-artifact@v4
        with:
          name: workspace
          path: .

      - name: 🔍 Vérifier si Swarm est déjà actif
        id: check_swarm
        run: |
          if docker info | grep -q "Swarm: active"; then
            echo "✅ Swarm déjà actif"
            echo "SWARM_ACTIVE=true" >> $GITHUB_ENV
          else
            echo "⚠️ Swarm non actif, initialisation en cours..."
            docker swarm init || true
            echo "SWARM_ACTIVE=false" >> $GITHUB_ENV
          fi

      - name: 🔑 Récupérer le token du manager (si Swarm actif)
        if: env.SWARM_ACTIVE == 'true'
        run: |
          TOKEN=$(docker swarm join-token manager -q)
          echo "TOKEN=$TOKEN" >> $GITHUB_ENV

      - name: 🛠️ Ajouter un manager si nécessaire
        if: env.TOKEN != ''
        run: |
          echo "Ajout du manager..."
          docker swarm join --token $TOKEN 10.1.0.104:2377 || echo "⚠️ Impossible d'ajouter un manager"

  ###########################
  #      DÉPLOIEMENT       #
  ###########################
  deploy:
    needs: manager
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [suricata, wazuh, elk, opencti]
    steps:
      - name: 🔄 Restaurer le workspace
        uses: actions/download-artifact@v4
        with:
          name: workspace
          path: .

      - name: 🚀 Déployer ${{ matrix.service }}
        run: |
          echo "🔄 Déploiement de ${{ matrix.service }}..."
          docker stack deploy -c ${{ matrix.service }}/docker-compose.yml ${{ matrix.service }} 2>&1 | tee logs_${{ matrix.service }}.txt || echo "${{ matrix.service }}_FAILED=true" >> $GITHUB_ENV
          sleep 10

      - name: 📦 Stocker les logs de ${{ matrix.service }}
        uses: actions/upload-artifact@v4
        with:
          name: logs_${{ matrix.service }}
          path: logs_${{ matrix.service }}.txt

  ###########################
  #       NETTOYAGE        #
  ###########################
  cleanup:
    needs: deploy
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: 🔄 Restaurer le workspace
        uses: actions/download-artifact@v4
        with:
          name: workspace
          path: .

      - name: 🗑️ Vérifier et Initialiser Swarm si nécessaire
        run: |
          if ! docker info | grep -q "Swarm: active"; then
            echo "⚠️ Swarm n'est pas actif, initialisation en cours..."
            docker swarm init || true
          fi

      - name: 🗑️ Nettoyer les services
        run: |
          docker stack ls
          for service in suricata wazuh elk opencti; do
            if docker stack ls | grep -q "$service"; then
              echo "🗑️ Suppression de la stack $service..."
              docker stack rm $service || true
            else
              echo "⚠️ Stack $service introuvable, rien à supprimer."
            fi
          done

  ###########################
  #  DÉTECTION DES ERREURS  #
  ###########################
  check_errors:
    needs: deploy
    runs-on: ubuntu-latest
    outputs:
      test_failed: ${{ steps.detect_failure.outputs.test_failed }}
    steps:
      - name: 📥 Récupérer les logs
        uses: actions/download-artifact@v4
        with:
          name: logs_${{ matrix.service }}
          path: logs

      - name: 🚨 Vérifier les erreurs
        id: detect_failure
        run: |
          TEST_FAILED=false
          for service in suricata wazuh elk opencti; do
            log_file="logs/logs_$service.txt"
            if [[ -f "$log_file" && $(grep -i "error\|failed\|cannot" "$log_file") ]]; then
              echo "⚠️ Erreur détectée dans $log_file"
              TEST_FAILED=true
              break
            fi
          done

          echo "test_failed=$TEST_FAILED" >> $GITHUB_OUTPUT

  ###########################
  #   GESTION DES BRANCHES  #
  ###########################
  push_logs:
    needs: check_errors
    if: needs.check_errors.outputs.test_failed == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Cloner le dépôt
        uses: actions/checkout@v4

      - name: 🔄 Restaurer les logs
        uses: actions/download-artifact@v4
        with:
          name: logs
          path: logs

      - name: 🏷️ Déterminer la branche cible
        run: |
          if [[ "${{ needs.check_errors.outputs.test_failed }}" == "true" ]]; then
            TIMESTAMP=$(date +'%Y%m%d-%H%M%S')
            echo "BRANCH=erreur-$TIMESTAMP" >> $GITHUB_ENV
          else
            echo "BRANCH=develop" >> $GITHUB_ENV
          fi

      - name: 📝 Générer le fichier de logs
        run: |
          echo "📅 Date : $(date)" > error-log.txt
          docker info >> error-log.txt 2>&1
          docker stack ls >> error-log.txt 2>&1
          docker service ls >> error-log.txt 2>&1
          docker ps -a >> error-log.txt 2>&1

          for service in suricata wazuh elk opencti; do
            log_file="logs/logs_$service.txt"
  
            if [[ -f "$log_file" ]]; then
              echo "❌ ERREUR DE DÉPLOIEMENT POUR $service :" >> error-log.txt
              cat "$log_file" >> error-log.txt
            else
              echo "⚠️ Aucun log trouvé pour $service, peut-être un échec de création ?" >> error-log.txt
            fi
          done

          git add error-log.txt

      - name: 🚀 Pousser la branche cible
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "github-actions@github.com"

          git checkout -b ${{ env.BRANCH }} || git checkout ${{ env.BRANCH }}

          git commit -m "Mise à jour automatique via GitHub Actions" || echo "Aucune modification à commit"
          git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git ${{ env.BRANCH }} --force
