name: Docker Swarm CI

on:
  push:
    branches-ignore:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - name: üì• Cloner le d√©p√¥t
      uses: actions/checkout@v3

    - name: ‚öôÔ∏è Configurer Docker et Swarm
      run: |
        docker swarm init || true
    
    - name: üîé V√©rifier l'existence des fichiers
      run: |
        ls -l Suricata/Docker-compose.yml || exit 1
        ls -l wazuh/docker-compose.yml || exit 1
        ls -l ELK/Docker-compose.yml || exit 1
        ls -l opencti/docker-compose.yml || exit 1

    ###########################
    #        SURICATA         #
    ###########################
    - name: üõ°Ô∏è Lancer les services Suricata
      run: |
        docker stack deploy -c Suricata/Docker-compose.yml suricata || echo "TEST_FAILED=true" >> $GITHUB_ENV
        sleep 10

    # - name: ‚úÖ V√©rifier l'√©tat de Suricata
    #   run: |
    #     echo "Attente de la mont√©e de Suricata..."
    #     timeout 180 bash -c 'while [[ $(docker service ps suricata --format "{{.CurrentState}}" | grep -c "Running") -eq 0 ]]; do sleep 5; done' || echo "TEST_FAILED=true" >> $GITHUB_ENV

    ###########################
    #         WAZUH          #
    ###########################
    - name: üìä Lancer les services Wazuh
      run: |
        docker stack deploy -c wazuh/docker-compose.yml wazuh || echo "TEST_FAILED=true" >> $GITHUB_ENV
        sleep 10

    # - name: ‚úÖ V√©rifier l'√©tat de Wazuh
    #   run: |
    #     echo "Attente de la mont√©e de Wazuh..."
    #     timeout 180 bash -c 'while [[ $(docker service ps wazuh --format "{{.CurrentState}}" | grep -c "Running") -eq 0 ]]; do sleep 5; done' || echo "TEST_FAILED=true" >> $GITHUB_ENV
    #     curl -f http://localhost:5601 || echo "TEST_FAILED=true" >> $GITHUB_ENV
    #     curl -f http://localhost:55000 || echo "TEST_FAILED=true" >> $GITHUB_ENV

    ###########################
    #          ELK           #
    ###########################
    - name: üìà Lancer les services ELK
      run: |
        docker stack deploy -c ELK/Docker-compose.yml elk || echo "TEST_FAILED=true" >> $GITHUB_ENV
        sleep 10

    # - name: ‚úÖ V√©rifier l'√©tat de ELK
    #   run: |
    #     echo "Attente de la mont√©e de ELK..."
    #     timeout 180 bash -c 'while [[ $(docker service ps elk --format "{{.CurrentState}}" | grep -c "Running") -eq 0 ]]; do sleep 5; done' || echo "TEST_FAILED=true" >> $GITHUB_ENV
    #     curl -f http://localhost:5601 || echo "TEST_FAILED=true" >> $GITHUB_ENV
    #     curl -f http://localhost:9200 || echo "TEST_FAILED=true" >> $GITHUB_ENV

    ###########################
    #        OPENCTI         #
    ###########################
    - name: üîç Lancer les services OpenCTI
      run: |
        docker stack deploy -c opencti/docker-compose.yml opencti || echo "TEST_FAILED=true" >> $GITHUB_ENV
        sleep 10

    # - name: ‚úÖ V√©rifier l'√©tat de OpenCTI
    #   run: |
    #    echo "Attente de la mont√©e de OpenCTI..."
    #    timeout 180 bash -c 'while [[ $(docker service ps opencti --format "{{.CurrentState}}" | grep -c "Running") -eq 0 ]]; do sleep 5; done' || echo "TEST_FAILED=true" >> $GITHUB_ENV
    #    curl -f http://localhost:8080 || echo "TEST_FAILED=true" >> $GITHUB_ENV

    ###########################
    #   GESTION DES BRANCHES  #
    ###########################
    - name: üè∑Ô∏è D√©terminer la branche cible
      id: branch_target
      run: |
        echo "TEST_FAILED=${{ env.TEST_FAILED }}"  # Debug pour voir si la variable est bien d√©finie
        if [[ "${{ env.TEST_FAILED }}" == "true" ]]; then
          TIMESTAMP=$(date +'%Y%m%d-%H%M%S')
          echo "BRANCH=erreur-$TIMESTAMP" >> $GITHUB_ENV
        else
          echo "BRANCH=develop" >> $GITHUB_ENV
        fi


    - name: üöÄ Cr√©er et Pousser la branche uniquement en cas d'erreur
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "github-actions@github.com"
  
          git checkout -b ${{ env.BRANCH }}
  
          if [[ "${{ env.TEST_FAILED }}" == "true" ]]; then
            echo "===== LOG DU PIPELINE =====" > error-log.txt
            echo "Date : $(date)" >> error-log.txt
            echo "===========================" >> error-log.txt
  
            echo "‚û°Ô∏è Docker Info :" >> error-log.txt
            docker info >> error-log.txt 2>&1
  
            echo "‚û°Ô∏è Docker Version :" >> error-log.txt
            docker version >> error-log.txt 2>&1
  
            echo "‚û°Ô∏è Liste des Stacks Docker :" >> error-log.txt
            docker stack ls >> error-log.txt 2>&1
  
            echo "‚û°Ô∏è Liste des Services Swarm :" >> error-log.txt
            docker service ls >> error-log.txt 2>&1
  
            echo "‚û°Ô∏è Liste des Conteneurs en cours d'ex√©cution :" >> error-log.txt
            docker ps -a >> error-log.txt 2>&1
  
            echo "‚û°Ô∏è Logs d√©taill√©s des services √©chou√©s :" >> error-log.txt
            for service in Suricata wazuh ELK opencti; do
              if docker stack ps $service 2>/dev/null | grep -q "Failed\|Rejected\|Shutdown\|Complete"; then
                echo "üîç Logs pour service: $service" >> error-log.txt
                docker service logs $service >> error-log.txt 2>&1
              else
                echo "‚ö†Ô∏è Service $service non actif ou introuvable, impossible de r√©cup√©rer les logs." >> error-log.txt
              fi
            done
  
            git add error-log.txt
          fi
  
          git commit -m "Mise √† jour automatique via GitHub Actions" || echo "Aucune modification √† commit"
  
          git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git ${{ env.BRANCH }} --force
    
    ###########################
    #       NETTOYAGE        #
    ###########################
    - name: üóëÔ∏è Nettoyer les services
      run: |
        docker stack rm suricata || true
        docker stack rm wazuh || true
        docker stack rm elk || true
        docker stack rm opencti || true